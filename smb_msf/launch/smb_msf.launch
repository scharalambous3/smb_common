<launch>

    <arg name="launch_state_to_base_link_publisher"  default="true"/>

    <node name="camera_convert" pkg="topic_tools" type="transform" args="/camera/odom/sample /camera_pose_conv geometry_msgs/PoseWithCovarianceStamped 'geometry_msgs.msg.PoseWithCovarianceStamped(header=m.header, pose=m.pose)' --import geometry_msgs std_msgs"/>
    <!--<node name="camera_msg_converter" pkg="camera_msg_converter" type="camera_msg_converter" output="screen"/> -->
    
    <node name="lidar_convert" pkg="topic_tools" type="transform" args="/transform_aft_mapped_to_init_CORRECTED /lidar_pos_conv geometry_msgs/PointStamped 'geometry_msgs.msg.PointStamped(header=m.header, point=geometry_msgs.msg.Point(m.transform.translation.x, m.transform.translation.y, m.transform.translation.z))' --import geometry_msgs std_msgs"/>

    <node name="msf_smb" pkg="msf_updates" type="position_pose_sensor" clear_params="true" output="screen"> #launch-prefix="gdb -ex run --args" 
        <!-- IMU -->
        <remap from="msf_core/imu_state_input" to="/versavis/imu" />
        <!-- 3DOF position -->
        <remap from="msf_updates/position_input" to="/lidar_pos_conv" /> 

        <!-- 6DOF Pose from camera odom -->
        <remap from="msf_updates/pose_with_covariance_input" to="/camera_pose_conv" />
        <!-- Params -->
        <rosparam file="$(find smb_msf)/param/smb_msf_params.yaml" command="load"/>
    </node>
    <!-- Initialize service -->
    <node pkg="rosservice" type="rosservice" name="initializer" args="call --wait /msf_smb/position_pose_sensor/initialize_msf_scale 1.0"/>

    <node pkg="tf" type="static_transform_publisher" name="imu_to_base" respawn="true" args="-0.255 0.024 -0.179 0 0 0 state base_link 100" if="$(arg launch_state_to_base_link_publisher)"/>

</launch>